

/**Travis Vaughn | 4/15/2016
 * File is: MyListener.java, Version 1.8
 * >javac MyListener.java
 * 
 * In separate shell windows:
 * >java MyListener
 * >java JokeClient
 * >java JokeClientAdmin
 *
 * Does not matter if client or server is opened first.
 * Server should be started before ClientAdmin is started.
 * ClientAdmin does not need to be run in order to run Client/Server
 * 
 * All files needed for running program
 * Travis Vaughn's Joke Server Checklist.html
 * JokeClientAdmin.java
 * MyListener.java
 * JokeClient.java
 * JokeOutput.docx (to review my results)
 *
 * A server for JokeClient. Elliott, after Hughes, Shoffner, Winslow
 * This will not run unless TCP/IP is loaded on your machine.
 *
 * Notes: For some reason passing an int via BufferedReader causes 
 * causes null character.  Would get NumberFormatExceptions, but couldn't 
 * resolve. When tried parsing string into array and only taking the character
 * for the int, system would throw NullPointerExceptions. Couldn't resolve 
 * this either despite allocating new memory for new lists. 
 * Finally ended up handling the nullpointer exception by simply ignoring it. 
 * Not ideal, but program still works.  IF YOU CAN FIGURE OUT THE ISSUE, PLEASE
 * LET ME KNOW AS I WAS LOSING MY MIND ON IT!!! (STARTS @ LINE 109) 
 ---------------------------------------------------------------*/
import java.io.*; //Get the Input Output libraries
import java.net.*; //Get the Java networking libraries
import java.lang.*; //Get the Java langauge libraries
import java.util.*; //Get Java utilities libraries

/*These are the hard-coded jokes and proverbs*/
class Text{
		//all jokes and proverbs are not my own original work.
		//they have been taken from the Internet.
		
		//joke variables
		//88 is an arbitrary sequence at the end of each mode array in 
		//MyListener.java
			
		public static String[] jokeA = new String[]{"A. How many computer programmers does it take to change a light bulb?", 
									  "None, that's a hardware problem.","", "88"};
		public static String[] jokeB = new String[]{"B. Listen to this:", "", "Programmer A says: How much money do I owe you?",
									  "Programmer B says: 500 dollars.", 
									  "Programmer A says: Shall we round it off to 512?", "", "88"};
		public static String[] jokeC = new String[]{"C. To understand recursion, one must first understand recursion.", "", "88"};
		public static String[] jokeD = new String[]{"D. A feature is nothing more than a bug with seniority.", "", "88"};
		public static String[] jokeE = new String[]{"E. Did I ever sing you my new joke song?", 
									  "I've got 99 little bugs in the code,",
									  "99 little bugs,",
									  "Take one down, patch it around,",
									  "I've got 127 little bugs in the code.", "", "88"};
		
		public static String[][] jokeArrays = new String[][]{jokeA, jokeB, jokeC, jokeD, jokeE};
		
		//proverb variables
		public static String[] proverbA = new String[]{"A. If you aren't, at any given time, scandalized by code you wrote five" +
										" or even three years ago, you're not learning anywhere near enough.","","88"};
		public static String[] proverbB = new String[]{"B. The most important property of a program is whether it" +
										 " accomplishes the intention of its user.", "","88"};
		public static String[] proverbC = new String[]{"C. Computer science is no more about computers " +
										 "than astronomy is about telescopes.", "","88"};
		public static String[] proverbD = new String[]{"D. Being an expert can be an excuse for staying in your comfort zone.", "", "88"};
		public static String[] proverbE = new String[]{"E. The first symptom of stagnation is preference.", "","88"};
		
		public static String[][] proverbArrays = new String[][]{proverbA, proverbB, proverbC, proverbD, proverbE};

		//maintenance variable
		public static String[] maintenance = new String[]{"The server is temporarily unavailable--check-back shortly.", "", "88"};
		public static String[][] maintenanceArrays = new String[][]{maintenance};
		
}

/* This creates a new thread each time it's called */
class Worker extends Thread {       //Class definition
    Socket sock;                    //Class member, socket, local to Worker
    Worker (Socket s)  {sock = s;}  //Constructor, assign arg s to local sock
	
		
    /*This function creates the I/O streams and passes arguments from client to server,
     * and prints back status to both client and server
     */
    public void run(){
        //Get I/O streams in/out from the socket:
        PrintStream out = null;
        BufferedReader in = null;
		DataInputStream inInt = null;
        try {
            //creating the input stream to the server from the client (where it takes in the host joke/ip address
            in = new BufferedReader
                    (new InputStreamReader(sock.getInputStream()));
				
            //creating the output stream where we print out on the server screen what we're looking up
            out = new PrintStream(sock.getOutputStream());
            // Note that this branch might not execute when expected:
            try {
                String name, clientID, strIndex;
				int serverIndex = 0;
				out.println(Mode.currentMode); //sends client current mode
				clientID = in.readLine(); //stores client ID
				name = in.readLine(); //stores user name
				strIndex = in.readLine(); //stores string of server index
				try {
					serverIndex = Integer.parseInt(strIndex); //converts string index to int index
				}catch(NumberFormatException e){} //keeps treating int as NULL; no amount of regex, looping, etc. could solve
			
                printJoke(name, serverIndex, out); //prints details back to client
            } catch(IOException x) { //if an IO error when reading in line from client, will catch exception and print below error
                System.out.println("Server read error");
                x.printStackTrace();
            }
        } catch(IOException ioe)    {} //if error when opening IO streams, will catch exception and print it to screen
    }

    /* Prints to client: input joke given, the host joke of the input, and the host IP
     * Also handles if unknown exception occurs
     */
    static void printJoke (String name, int serverIndex, PrintStream out) {
		//server output if in joke mode
		if (Mode.currentMode.equals("j")){
			out.println("Looking up joke...\n");
			out.println(name + ",");
			for (int i = 0; i < Text.jokeArrays[serverIndex].length; i++) {
				out.println(Text.jokeArrays[serverIndex][i]); //To client
			}
		}

		//server output if in proverb mode
		else if (Mode.currentMode.equals("p")){
			out.println("Looking up proverb...\n");
			out.println(name + ",");
			for (int j = 0; j < Text.proverbArrays[serverIndex].length; j++) {
				out.println(Text.proverbArrays[serverIndex][j]); //To client
			}
		}

		//server out put if in maintenance mode
		else if (Mode.currentMode.equals("m")){
			for (int k = 0; k < Text.maintenanceArrays[0].length; k++) {
				out.println(Text.maintenanceArrays[0][k]); //To client
			}
		}
		//error checker
		else {
			out.println("We are experiencing technical difficulties right now. The mode is: " + Mode.currentMode);
			}
    }
}



/*This runs creates a new admin specific thread*/
class AdminRequest implements Runnable {
  public void run(){ // running admin request
    
    int q_len = 6; /* Number of requests for OpSys to queue */
    int port = 4555;  // listening at different port as other port is blocked and should remain block
					  //just as this one should be.
    Socket sock;

    try{
      ServerSocket servsock = new ServerSocket(port, q_len);
      while (true) {
		// listening for admin connection
		sock = servsock.accept();
		new AdminWorker (sock).start(); 
      }
    }catch (IOException ioe) {System.out.println(ioe);}
  }
}
 
 /*This handles the connection with the Admin client by
  taking in client request, changing the mode, updating the global 
  mode and send confirmation back to client
  */
 class AdminWorker extends Thread {       //Class definition
    Socket sock;                    //Class member, socket, local to Worker
    AdminWorker (Socket s)  {sock = s;}  //Constructor, assign arg s to local sock

	    /*This function creates the I/O streams and passes arguments from client to server,
     * and prints back status to both client and server
     */
    public void run(){
        //Get I/O streams in/out from the socket:
        PrintStream out = null;
        BufferedReader in = null;
        try {
            //creating the input stream to the server from the admin client
            in = new BufferedReader
                    (new InputStreamReader(sock.getInputStream()));

            //creating the output stream where we print out on the server screen what we're looking up
            out = new PrintStream(sock.getOutputStream());
            // Note that this branch might not execute when expected:
            try {
                String mode;
                mode = in.readLine(); //stores the value input on the client side
                System.out.println("Processing mode request: " + mode); //prints out that we're looking up host joke/ ip
                changeMode(mode, out); //prints details back to client
            } catch(IOException x) { //if an IO error when reading in line from client, will catch exception and print below error
                System.out.println("Server read error");
                x.printStackTrace();
            }
        } catch(IOException ioe)    {System.out.println(ioe);} //if error when opening IO streams, will catch exception and print it to screen
    }
	
	/* Prints to client: input joke given, the host joke of the input, and the host IP
     * Also handles if unknown exception occurs
     */
    static void changeMode (String mode, PrintStream out) {
    	out.println("Processing mode request...\n");
    	if (Mode.currentMode.equals(mode)){
    		out.println("Server is already in this mode, nothing changed.");
    	}
    	else if (mode.equals("j") || mode.equals("p") || mode.equals("m")){
    		Mode.currentMode = mode;
			if (Mode.currentMode.equals("j")) {out.println("Server mode changed to: joke-mode");}
			else if(Mode.currentMode.equals("p")) {out.println("Server mode changed to: proverb-mode");}
			else if(Mode.currentMode.equals("m")) {out.println("Server mode changed to: maintenance-mode");}
			else {out.println("We're experenience difficulties. We appreciate your patience.");}
    	}
    	else{
    		out.println("Incorrect mode entered.");
    	}
    }

}

/*Global variable to maintain mode to allow for adjustment throughout code*/
class Mode{
	public static String currentMode;
}

public class MyListener {

    /* This is the code that executes the server
     * Generates infinite loop to keep handling client requests
     * With each new request, a new thread is created to handle request
     */
    public static void main(String a[]) throws IOException{
        int q_len = 6; //Not interesting. Number of requests for Opsys to queue
        int port = 4444; //this is how the server and client know where to send/receive requests on the server.
                        // it specifically identifies the process, since a server can handle multiple different requests
		Mode.currentMode = "j";
		Socket sock;
	
		AdminRequest admin = new AdminRequest(); // create different thread for admin specific request
		Thread t = new Thread(admin);
		t.start();  // waits for admin input
		
        ServerSocket servsock = new ServerSocket(port, q_len); //initializes new server socket

        System.out.println
                ("Travis Vaughn's Joke Server 1.8 starting up.\n");
        //this is the main server routine.  It listens for client requests and then sends their requests
        //off to new threads for the Worker class to handle
		
        while (true){
            sock = servsock.accept(); //wait for the next client connection
            new Worker(sock).start(); //Spawn worker to handle it; this is the multi-threading
											   //creating a new thread each time a new client request comes in
		}
    }
}
